# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy it on AMAZON EKS. 

name: Deploy to Amazon EKS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: "us-east-1"                     # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: "nodejs_repo"             # set this to your Amazon ECR repository name
  EKS_SERVICE: js_exp                           # set this to your Amazon ECS service name
  EKS_CLUSTER: nodejs_dm                 # set this to your Amazon EKS cluster name
  K8S_NS: default
  CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: K8s Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
    # - name: GIT Checkout
    #   uses: actions/checkout@v3

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ${{ env.AWS_REGION }}

    - name: Checkout GIT repo
      uses: actions/checkout@v3
       
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2       # More information on this action can be found below in the 'AWS Credentials' section
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: arn:aws:iam::406102979514:role/githubActions-Role
          role-duration-seconds: 3600
          aws-region: us-east-1
    
    - name: Generate manifest file with image tag from Github workflow
      run: |
        # sed -i "s/\$\{IMAGE_TAG\}/$(echo $GITHUB_SHA)/g" ./k8s/deployment.yaml
        sed -i "s/\${IMAGE_TAG}/$(echo $GITHUB_SHA)/g" ./k8s/deployment.yaml
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
          mask-password: 'false'

    - name: Push image to Amazon ECR
      id: build-image
      env:
        # ECR_REGISTRY: "406102979514.dkr.ecr.us-east-1.amazonaws.com"
        # IMAGE_TAG: "latest"
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        # IMAGE_TAG: "latest"
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to EKS.
        
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Setup K8s Tools
      id: build-tools
      uses: yokawasa/action-setup-kube-tools@v0.9.2
      with:
        kubectl: '1.28.2'
        kustomize: '3.7.0'
        helm: '3.5.2'
        helmv2: '2.16.7'
        kubeconform: '0.5.0'
        conftest: '0.18.2'
        rancher: '2.4.10'
        tilt: '0.18.11'
        skaffold: '1.20.0'
        kube-score: '1.10.1'
    - run: |
        kubectl version --client
        kustomize version
        helm version
        helmv2 version --client
        kubeconform -v
        conftest --version
        yq --version
        rancher --version
        tilt version
        skaffold version
        kube-score version
    
    - name: Connect to EKS Cluster
      run: | 
        aws eks update-kubeconfig --name $EKS_CLUSTER --region $AWS_REGION 

    - name: Do Deploy
      run: |
        # kubectl create namespace $K8S_NS
        kubectl config set-context --current --namespace $K8S_NS
        kubectl apply -f ./k8s/deployment.yaml
        kubectl apply -f ./k8s/service.yaml

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #     container-name: ${{ env.CONTAINER_NAME }}
    #     image: ${{ steps.build-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true
